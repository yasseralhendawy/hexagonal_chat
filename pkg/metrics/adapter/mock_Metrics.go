// Code generated by mockery. DO NOT EDIT.

package appmetrics

import mock "github.com/stretchr/testify/mock"

// MockMetrics is an autogenerated mock type for the Metrics type
type MockMetrics struct {
	mock.Mock
}

type MockMetrics_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMetrics) EXPECT() *MockMetrics_Expecter {
	return &MockMetrics_Expecter{mock: &_m.Mock}
}

// DBCallsWithLabelValues provides a mock function with given fields: lvs
func (_m *MockMetrics) DBCallsWithLabelValues(lvs ...string) {
	_va := make([]interface{}, len(lvs))
	for _i := range lvs {
		_va[_i] = lvs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockMetrics_DBCallsWithLabelValues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DBCallsWithLabelValues'
type MockMetrics_DBCallsWithLabelValues_Call struct {
	*mock.Call
}

// DBCallsWithLabelValues is a helper method to define mock.On call
//   - lvs ...string
func (_e *MockMetrics_Expecter) DBCallsWithLabelValues(lvs ...interface{}) *MockMetrics_DBCallsWithLabelValues_Call {
	return &MockMetrics_DBCallsWithLabelValues_Call{Call: _e.mock.On("DBCallsWithLabelValues",
		append([]interface{}{}, lvs...)...)}
}

func (_c *MockMetrics_DBCallsWithLabelValues_Call) Run(run func(lvs ...string)) *MockMetrics_DBCallsWithLabelValues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockMetrics_DBCallsWithLabelValues_Call) Return() *MockMetrics_DBCallsWithLabelValues_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetrics_DBCallsWithLabelValues_Call) RunAndReturn(run func(...string)) *MockMetrics_DBCallsWithLabelValues_Call {
	_c.Run(run)
	return _c
}

// LatencyWithLabelValues provides a mock function with given fields: duration, lvs
func (_m *MockMetrics) LatencyWithLabelValues(duration float64, lvs ...string) {
	_va := make([]interface{}, len(lvs))
	for _i := range lvs {
		_va[_i] = lvs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, duration)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockMetrics_LatencyWithLabelValues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LatencyWithLabelValues'
type MockMetrics_LatencyWithLabelValues_Call struct {
	*mock.Call
}

// LatencyWithLabelValues is a helper method to define mock.On call
//   - duration float64
//   - lvs ...string
func (_e *MockMetrics_Expecter) LatencyWithLabelValues(duration interface{}, lvs ...interface{}) *MockMetrics_LatencyWithLabelValues_Call {
	return &MockMetrics_LatencyWithLabelValues_Call{Call: _e.mock.On("LatencyWithLabelValues",
		append([]interface{}{duration}, lvs...)...)}
}

func (_c *MockMetrics_LatencyWithLabelValues_Call) Run(run func(duration float64, lvs ...string)) *MockMetrics_LatencyWithLabelValues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(float64), variadicArgs...)
	})
	return _c
}

func (_c *MockMetrics_LatencyWithLabelValues_Call) Return() *MockMetrics_LatencyWithLabelValues_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMetrics_LatencyWithLabelValues_Call) RunAndReturn(run func(float64, ...string)) *MockMetrics_LatencyWithLabelValues_Call {
	_c.Run(run)
	return _c
}

// NewMockMetrics creates a new instance of MockMetrics. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMetrics(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMetrics {
	mock := &MockMetrics{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
