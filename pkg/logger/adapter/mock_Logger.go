// Code generated by mockery. DO NOT EDIT.

package logger

import mock "github.com/stretchr/testify/mock"

// MockLogger is an autogenerated mock type for the Logger type
type MockLogger struct {
	mock.Mock
}

type MockLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLogger) EXPECT() *MockLogger_Expecter {
	return &MockLogger_Expecter{mock: &_m.Mock}
}

// Debug provides a mock function with given fields: lf, msg, extra
func (_m *MockLogger) Debug(lf LoggerFrom, msg string, extra map[string]interface{}) {
	_m.Called(lf, msg, extra)
}

// MockLogger_Debug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debug'
type MockLogger_Debug_Call struct {
	*mock.Call
}

// Debug is a helper method to define mock.On call
//   - lf LoggerFrom
//   - msg string
//   - extra map[string]interface{}
func (_e *MockLogger_Expecter) Debug(lf interface{}, msg interface{}, extra interface{}) *MockLogger_Debug_Call {
	return &MockLogger_Debug_Call{Call: _e.mock.On("Debug", lf, msg, extra)}
}

func (_c *MockLogger_Debug_Call) Run(run func(lf LoggerFrom, msg string, extra map[string]interface{})) *MockLogger_Debug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(LoggerFrom), args[1].(string), args[2].(map[string]interface{}))
	})
	return _c
}

func (_c *MockLogger_Debug_Call) Return() *MockLogger_Debug_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Debug_Call) RunAndReturn(run func(LoggerFrom, string, map[string]interface{})) *MockLogger_Debug_Call {
	_c.Call.Return(run)
	return _c
}

// Error provides a mock function with given fields: lf, msg, extra
func (_m *MockLogger) Error(lf LoggerFrom, msg string, extra map[string]interface{}) {
	_m.Called(lf, msg, extra)
}

// MockLogger_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type MockLogger_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - lf LoggerFrom
//   - msg string
//   - extra map[string]interface{}
func (_e *MockLogger_Expecter) Error(lf interface{}, msg interface{}, extra interface{}) *MockLogger_Error_Call {
	return &MockLogger_Error_Call{Call: _e.mock.On("Error", lf, msg, extra)}
}

func (_c *MockLogger_Error_Call) Run(run func(lf LoggerFrom, msg string, extra map[string]interface{})) *MockLogger_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(LoggerFrom), args[1].(string), args[2].(map[string]interface{}))
	})
	return _c
}

func (_c *MockLogger_Error_Call) Return() *MockLogger_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Error_Call) RunAndReturn(run func(LoggerFrom, string, map[string]interface{})) *MockLogger_Error_Call {
	_c.Call.Return(run)
	return _c
}

// Fatal provides a mock function with given fields: lf, msg, extra
func (_m *MockLogger) Fatal(lf LoggerFrom, msg string, extra map[string]interface{}) {
	_m.Called(lf, msg, extra)
}

// MockLogger_Fatal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fatal'
type MockLogger_Fatal_Call struct {
	*mock.Call
}

// Fatal is a helper method to define mock.On call
//   - lf LoggerFrom
//   - msg string
//   - extra map[string]interface{}
func (_e *MockLogger_Expecter) Fatal(lf interface{}, msg interface{}, extra interface{}) *MockLogger_Fatal_Call {
	return &MockLogger_Fatal_Call{Call: _e.mock.On("Fatal", lf, msg, extra)}
}

func (_c *MockLogger_Fatal_Call) Run(run func(lf LoggerFrom, msg string, extra map[string]interface{})) *MockLogger_Fatal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(LoggerFrom), args[1].(string), args[2].(map[string]interface{}))
	})
	return _c
}

func (_c *MockLogger_Fatal_Call) Return() *MockLogger_Fatal_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Fatal_Call) RunAndReturn(run func(LoggerFrom, string, map[string]interface{})) *MockLogger_Fatal_Call {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function with given fields: lf, msg, extra
func (_m *MockLogger) Info(lf LoggerFrom, msg string, extra map[string]interface{}) {
	_m.Called(lf, msg, extra)
}

// MockLogger_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type MockLogger_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - lf LoggerFrom
//   - msg string
//   - extra map[string]interface{}
func (_e *MockLogger_Expecter) Info(lf interface{}, msg interface{}, extra interface{}) *MockLogger_Info_Call {
	return &MockLogger_Info_Call{Call: _e.mock.On("Info", lf, msg, extra)}
}

func (_c *MockLogger_Info_Call) Run(run func(lf LoggerFrom, msg string, extra map[string]interface{})) *MockLogger_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(LoggerFrom), args[1].(string), args[2].(map[string]interface{}))
	})
	return _c
}

func (_c *MockLogger_Info_Call) Return() *MockLogger_Info_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Info_Call) RunAndReturn(run func(LoggerFrom, string, map[string]interface{})) *MockLogger_Info_Call {
	_c.Call.Return(run)
	return _c
}

// Warn provides a mock function with given fields: lf, msg, extra
func (_m *MockLogger) Warn(lf LoggerFrom, msg string, extra map[string]interface{}) {
	_m.Called(lf, msg, extra)
}

// MockLogger_Warn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warn'
type MockLogger_Warn_Call struct {
	*mock.Call
}

// Warn is a helper method to define mock.On call
//   - lf LoggerFrom
//   - msg string
//   - extra map[string]interface{}
func (_e *MockLogger_Expecter) Warn(lf interface{}, msg interface{}, extra interface{}) *MockLogger_Warn_Call {
	return &MockLogger_Warn_Call{Call: _e.mock.On("Warn", lf, msg, extra)}
}

func (_c *MockLogger_Warn_Call) Run(run func(lf LoggerFrom, msg string, extra map[string]interface{})) *MockLogger_Warn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(LoggerFrom), args[1].(string), args[2].(map[string]interface{}))
	})
	return _c
}

func (_c *MockLogger_Warn_Call) Return() *MockLogger_Warn_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Warn_Call) RunAndReturn(run func(LoggerFrom, string, map[string]interface{})) *MockLogger_Warn_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLogger creates a new instance of MockLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLogger {
	mock := &MockLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
