// Code generated by mockery. DO NOT EDIT.

package chat

import mock "github.com/stretchr/testify/mock"

// MockIChatRepo is an autogenerated mock type for the IChatRepo type
type MockIChatRepo struct {
	mock.Mock
}

type MockIChatRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIChatRepo) EXPECT() *MockIChatRepo_Expecter {
	return &MockIChatRepo_Expecter{mock: &_m.Mock}
}

// EditMessage provides a mock function with given fields: _a0
func (_m *MockIChatRepo) EditMessage(_a0 *Message) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for EditMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*Message) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIChatRepo_EditMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EditMessage'
type MockIChatRepo_EditMessage_Call struct {
	*mock.Call
}

// EditMessage is a helper method to define mock.On call
//   - _a0 *Message
func (_e *MockIChatRepo_Expecter) EditMessage(_a0 interface{}) *MockIChatRepo_EditMessage_Call {
	return &MockIChatRepo_EditMessage_Call{Call: _e.mock.On("EditMessage", _a0)}
}

func (_c *MockIChatRepo_EditMessage_Call) Run(run func(_a0 *Message)) *MockIChatRepo_EditMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Message))
	})
	return _c
}

func (_c *MockIChatRepo_EditMessage_Call) Return(_a0 error) *MockIChatRepo_EditMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIChatRepo_EditMessage_Call) RunAndReturn(run func(*Message) error) *MockIChatRepo_EditMessage_Call {
	_c.Call.Return(run)
	return _c
}

// GetChat provides a mock function with given fields: _a0
func (_m *MockIChatRepo) GetChat(_a0 string) (*Chat, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetChat")
	}

	var r0 *Chat
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*Chat, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *Chat); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Chat)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIChatRepo_GetChat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChat'
type MockIChatRepo_GetChat_Call struct {
	*mock.Call
}

// GetChat is a helper method to define mock.On call
//   - _a0 string
func (_e *MockIChatRepo_Expecter) GetChat(_a0 interface{}) *MockIChatRepo_GetChat_Call {
	return &MockIChatRepo_GetChat_Call{Call: _e.mock.On("GetChat", _a0)}
}

func (_c *MockIChatRepo_GetChat_Call) Run(run func(_a0 string)) *MockIChatRepo_GetChat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockIChatRepo_GetChat_Call) Return(_a0 *Chat, _a1 error) *MockIChatRepo_GetChat_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIChatRepo_GetChat_Call) RunAndReturn(run func(string) (*Chat, error)) *MockIChatRepo_GetChat_Call {
	_c.Call.Return(run)
	return _c
}

// SaveMessage provides a mock function with given fields: _a0
func (_m *MockIChatRepo) SaveMessage(_a0 *Message) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SaveMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*Message) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIChatRepo_SaveMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveMessage'
type MockIChatRepo_SaveMessage_Call struct {
	*mock.Call
}

// SaveMessage is a helper method to define mock.On call
//   - _a0 *Message
func (_e *MockIChatRepo_Expecter) SaveMessage(_a0 interface{}) *MockIChatRepo_SaveMessage_Call {
	return &MockIChatRepo_SaveMessage_Call{Call: _e.mock.On("SaveMessage", _a0)}
}

func (_c *MockIChatRepo_SaveMessage_Call) Run(run func(_a0 *Message)) *MockIChatRepo_SaveMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Message))
	})
	return _c
}

func (_c *MockIChatRepo_SaveMessage_Call) Return(_a0 error) *MockIChatRepo_SaveMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIChatRepo_SaveMessage_Call) RunAndReturn(run func(*Message) error) *MockIChatRepo_SaveMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIChatRepo creates a new instance of MockIChatRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIChatRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIChatRepo {
	mock := &MockIChatRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
