// Code generated by mockery. DO NOT EDIT.

package auth

import mock "github.com/stretchr/testify/mock"

// MockIAuthRepo is an autogenerated mock type for the IAuthRepo type
type MockIAuthRepo struct {
	mock.Mock
}

type MockIAuthRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIAuthRepo) EXPECT() *MockIAuthRepo_Expecter {
	return &MockIAuthRepo_Expecter{mock: &_m.Mock}
}

// CheckUserEmailExist provides a mock function with given fields: _a0
func (_m *MockIAuthRepo) CheckUserEmailExist(_a0 string) (bool, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CheckUserEmailExist")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAuthRepo_CheckUserEmailExist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckUserEmailExist'
type MockIAuthRepo_CheckUserEmailExist_Call struct {
	*mock.Call
}

// CheckUserEmailExist is a helper method to define mock.On call
//   - _a0 string
func (_e *MockIAuthRepo_Expecter) CheckUserEmailExist(_a0 interface{}) *MockIAuthRepo_CheckUserEmailExist_Call {
	return &MockIAuthRepo_CheckUserEmailExist_Call{Call: _e.mock.On("CheckUserEmailExist", _a0)}
}

func (_c *MockIAuthRepo_CheckUserEmailExist_Call) Run(run func(_a0 string)) *MockIAuthRepo_CheckUserEmailExist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockIAuthRepo_CheckUserEmailExist_Call) Return(_a0 bool, _a1 error) *MockIAuthRepo_CheckUserEmailExist_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAuthRepo_CheckUserEmailExist_Call) RunAndReturn(run func(string) (bool, error)) *MockIAuthRepo_CheckUserEmailExist_Call {
	_c.Call.Return(run)
	return _c
}

// CreateNewUser provides a mock function with given fields: _a0
func (_m *MockIAuthRepo) CreateNewUser(_a0 *User) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateNewUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*User) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAuthRepo_CreateNewUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNewUser'
type MockIAuthRepo_CreateNewUser_Call struct {
	*mock.Call
}

// CreateNewUser is a helper method to define mock.On call
//   - _a0 *User
func (_e *MockIAuthRepo_Expecter) CreateNewUser(_a0 interface{}) *MockIAuthRepo_CreateNewUser_Call {
	return &MockIAuthRepo_CreateNewUser_Call{Call: _e.mock.On("CreateNewUser", _a0)}
}

func (_c *MockIAuthRepo_CreateNewUser_Call) Run(run func(_a0 *User)) *MockIAuthRepo_CreateNewUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*User))
	})
	return _c
}

func (_c *MockIAuthRepo_CreateNewUser_Call) Return(_a0 error) *MockIAuthRepo_CreateNewUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAuthRepo_CreateNewUser_Call) RunAndReturn(run func(*User) error) *MockIAuthRepo_CreateNewUser_Call {
	_c.Call.Return(run)
	return _c
}

// EditUser provides a mock function with given fields: _a0
func (_m *MockIAuthRepo) EditUser(_a0 *User) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for EditUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*User) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAuthRepo_EditUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EditUser'
type MockIAuthRepo_EditUser_Call struct {
	*mock.Call
}

// EditUser is a helper method to define mock.On call
//   - _a0 *User
func (_e *MockIAuthRepo_Expecter) EditUser(_a0 interface{}) *MockIAuthRepo_EditUser_Call {
	return &MockIAuthRepo_EditUser_Call{Call: _e.mock.On("EditUser", _a0)}
}

func (_c *MockIAuthRepo_EditUser_Call) Run(run func(_a0 *User)) *MockIAuthRepo_EditUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*User))
	})
	return _c
}

func (_c *MockIAuthRepo_EditUser_Call) Return(_a0 error) *MockIAuthRepo_EditUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAuthRepo_EditUser_Call) RunAndReturn(run func(*User) error) *MockIAuthRepo_EditUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function with given fields: _a0
func (_m *MockIAuthRepo) GetUserByEmail(_a0 string) (*User, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAuthRepo_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type MockIAuthRepo_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - _a0 string
func (_e *MockIAuthRepo_Expecter) GetUserByEmail(_a0 interface{}) *MockIAuthRepo_GetUserByEmail_Call {
	return &MockIAuthRepo_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", _a0)}
}

func (_c *MockIAuthRepo_GetUserByEmail_Call) Run(run func(_a0 string)) *MockIAuthRepo_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockIAuthRepo_GetUserByEmail_Call) Return(_a0 *User, _a1 error) *MockIAuthRepo_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAuthRepo_GetUserByEmail_Call) RunAndReturn(run func(string) (*User, error)) *MockIAuthRepo_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIAuthRepo creates a new instance of MockIAuthRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIAuthRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIAuthRepo {
	mock := &MockIAuthRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
