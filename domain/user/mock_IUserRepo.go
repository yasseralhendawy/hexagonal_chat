// Code generated by mockery. DO NOT EDIT.

package user

import mock "github.com/stretchr/testify/mock"

// MockIUserRepo is an autogenerated mock type for the IUserRepo type
type MockIUserRepo struct {
	mock.Mock
}

type MockIUserRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIUserRepo) EXPECT() *MockIUserRepo_Expecter {
	return &MockIUserRepo_Expecter{mock: &_m.Mock}
}

// CheckParticipants provides a mock function with given fields: participants
func (_m *MockIUserRepo) CheckParticipants(participants []string) ([]*Person, error) {
	ret := _m.Called(participants)

	if len(ret) == 0 {
		panic("no return value specified for CheckParticipants")
	}

	var r0 []*Person
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]*Person, error)); ok {
		return rf(participants)
	}
	if rf, ok := ret.Get(0).(func([]string) []*Person); ok {
		r0 = rf(participants)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Person)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(participants)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIUserRepo_CheckParticipants_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckParticipants'
type MockIUserRepo_CheckParticipants_Call struct {
	*mock.Call
}

// CheckParticipants is a helper method to define mock.On call
//   - participants []string
func (_e *MockIUserRepo_Expecter) CheckParticipants(participants interface{}) *MockIUserRepo_CheckParticipants_Call {
	return &MockIUserRepo_CheckParticipants_Call{Call: _e.mock.On("CheckParticipants", participants)}
}

func (_c *MockIUserRepo_CheckParticipants_Call) Run(run func(participants []string)) *MockIUserRepo_CheckParticipants_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockIUserRepo_CheckParticipants_Call) Return(_a0 []*Person, _a1 error) *MockIUserRepo_CheckParticipants_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIUserRepo_CheckParticipants_Call) RunAndReturn(run func([]string) ([]*Person, error)) *MockIUserRepo_CheckParticipants_Call {
	_c.Call.Return(run)
	return _c
}

// CreateNewChat provides a mock function with given fields: _a0
func (_m *MockIUserRepo) CreateNewChat(_a0 *UserChat) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateNewChat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*UserChat) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIUserRepo_CreateNewChat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNewChat'
type MockIUserRepo_CreateNewChat_Call struct {
	*mock.Call
}

// CreateNewChat is a helper method to define mock.On call
//   - _a0 *UserChat
func (_e *MockIUserRepo_Expecter) CreateNewChat(_a0 interface{}) *MockIUserRepo_CreateNewChat_Call {
	return &MockIUserRepo_CreateNewChat_Call{Call: _e.mock.On("CreateNewChat", _a0)}
}

func (_c *MockIUserRepo_CreateNewChat_Call) Run(run func(_a0 *UserChat)) *MockIUserRepo_CreateNewChat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*UserChat))
	})
	return _c
}

func (_c *MockIUserRepo_CreateNewChat_Call) Return(_a0 error) *MockIUserRepo_CreateNewChat_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIUserRepo_CreateNewChat_Call) RunAndReturn(run func(*UserChat) error) *MockIUserRepo_CreateNewChat_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserChat provides a mock function with given fields: _a0
func (_m *MockIUserRepo) GetUserChat(_a0 string) (*UserChat, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetUserChat")
	}

	var r0 *UserChat
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*UserChat, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *UserChat); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UserChat)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIUserRepo_GetUserChat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserChat'
type MockIUserRepo_GetUserChat_Call struct {
	*mock.Call
}

// GetUserChat is a helper method to define mock.On call
//   - _a0 string
func (_e *MockIUserRepo_Expecter) GetUserChat(_a0 interface{}) *MockIUserRepo_GetUserChat_Call {
	return &MockIUserRepo_GetUserChat_Call{Call: _e.mock.On("GetUserChat", _a0)}
}

func (_c *MockIUserRepo_GetUserChat_Call) Run(run func(_a0 string)) *MockIUserRepo_GetUserChat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockIUserRepo_GetUserChat_Call) Return(_a0 *UserChat, _a1 error) *MockIUserRepo_GetUserChat_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIUserRepo_GetUserChat_Call) RunAndReturn(run func(string) (*UserChat, error)) *MockIUserRepo_GetUserChat_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserHistory provides a mock function with given fields: _a0
func (_m *MockIUserRepo) GetUserHistory(_a0 string) ([]*UserChat, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetUserHistory")
	}

	var r0 []*UserChat
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*UserChat, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) []*UserChat); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*UserChat)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIUserRepo_GetUserHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserHistory'
type MockIUserRepo_GetUserHistory_Call struct {
	*mock.Call
}

// GetUserHistory is a helper method to define mock.On call
//   - _a0 string
func (_e *MockIUserRepo_Expecter) GetUserHistory(_a0 interface{}) *MockIUserRepo_GetUserHistory_Call {
	return &MockIUserRepo_GetUserHistory_Call{Call: _e.mock.On("GetUserHistory", _a0)}
}

func (_c *MockIUserRepo_GetUserHistory_Call) Run(run func(_a0 string)) *MockIUserRepo_GetUserHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockIUserRepo_GetUserHistory_Call) Return(_a0 []*UserChat, _a1 error) *MockIUserRepo_GetUserHistory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIUserRepo_GetUserHistory_Call) RunAndReturn(run func(string) ([]*UserChat, error)) *MockIUserRepo_GetUserHistory_Call {
	_c.Call.Return(run)
	return _c
}

// SaveUserChat provides a mock function with given fields: _a0
func (_m *MockIUserRepo) SaveUserChat(_a0 *UserChat) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SaveUserChat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*UserChat) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIUserRepo_SaveUserChat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveUserChat'
type MockIUserRepo_SaveUserChat_Call struct {
	*mock.Call
}

// SaveUserChat is a helper method to define mock.On call
//   - _a0 *UserChat
func (_e *MockIUserRepo_Expecter) SaveUserChat(_a0 interface{}) *MockIUserRepo_SaveUserChat_Call {
	return &MockIUserRepo_SaveUserChat_Call{Call: _e.mock.On("SaveUserChat", _a0)}
}

func (_c *MockIUserRepo_SaveUserChat_Call) Run(run func(_a0 *UserChat)) *MockIUserRepo_SaveUserChat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*UserChat))
	})
	return _c
}

func (_c *MockIUserRepo_SaveUserChat_Call) Return(_a0 error) *MockIUserRepo_SaveUserChat_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIUserRepo_SaveUserChat_Call) RunAndReturn(run func(*UserChat) error) *MockIUserRepo_SaveUserChat_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIUserRepo creates a new instance of MockIUserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIUserRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIUserRepo {
	mock := &MockIUserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
